#include "ksocket.h"
#include <iostream>
#include <random>
#include <chrono>
#include <thread>
#include <csignal>
#include <cstring>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <arpa/inet.h>

static SharedMemory* shm = nullptr;

bool dropMessage(double probability) {
    static std::mt19937 rng(std::random_device{}());
    std::uniform_real_distribution<double> dist(0.0, 1.0);

    bool dropped = dist(rng) < probability;
    if (dropped) {
        std::cout << "[dropMessage] Packet dropped (p=" << probability << ")\n";
    }
    return dropped;
}

int init_shared_memory() {
    std::cout << "[init_shared_memory] Initializing shared memory...\n";
    int shmid = shmget(IPC_PRIVATE, sizeof(SharedMemory), 0666 | IPC_CREAT);
    if (shmid == -1) {
        perror("[init_shared_memory] shmget failed");
        return -1;
    }

    shm = static_cast<SharedMemory*>(shmat(shmid, nullptr, 0));
    if (shm == reinterpret_cast<void*>(-1)) {
        perror("[init_shared_memory] shmat failed");
        return -1;
    }

    for (int i = 0; i < MAX_SOCKETS; i++) {
        auto& sock = shm->sockets[i];
        sock.is_free = true;
        sock.process_id = 0;
        sock.sock_id = -1;
        sock.send_count = 0;
        sock.recv_count = 0;
        sock.swnd = {0,0,0,{} ,{}};
        sock.rwnd = {0,0,WINDOW_SIZE,{}};
    }
    shm->drop_probability = 0.1;

    std::cout << "[init_shared_memory] Shared memory initialized with ID: " << shmid << "\n";
    return shmid;
}

void cleanup_shared_memory(int shmid) {
    if (shmctl(shmid, IPC_RMID, nullptr) == -1) {
        perror("[cleanup_shared_memory] shmctl failed");
    } else {
        std::cout << "[cleanup_shared_memory] Shared memory " << shmid << " removed\n";
    }
}
